// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (4.062kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xdf\x6f\xdb\xb6\x13\x7f\xb6\xfe\x8a\xab\x90\x36\x52\xbf\xae\xec\x2f\xf6\xb4\x76\x1e\x30\xb4\x5d\xd0\x02\x4d\x0a\x24\xdb\x4b\x10\x14\x8c\x75\x72\xb8\x48\x94\x4a\xd2\xae\x0d\x8d\xff\xfb\x70\x24\x25\xd3\xb2\x92\x74\x40\xf7\x62\x58\xbc\xdf\x77\x9f\x3b\x1e\xdb\xf6\x15\xe4\x58\x70\x81\x10\xdf\x21\xcb\x51\xc6\xc6\x44\xb3\x19\xbc\xad\x73\x84\x15\x0a\x94\x4c\x63\x0e\xb7\x3b\x58\xd5\xaf\x50\xac\x2b\x22\xbe\xbb\x80\xf3\x8b\x2b\x78\xff\xee\xc3\xd5\xb3\x28\x6a\xd8\xf2\x9e\xad\x10\xda\x36\xf3\x7f\x8d\x89\x22\x5e\x35\xb5\xd4\x90\x44\x00\x00\x64\x86\x17\x90\xfd\xa5\x6a\x01\xc6\xc4\x28\x96\x75\xce\xc5\x6a\x46\x07\x71\xdb\x02\x8a\x1c\x5e\x19\x33\xca\xac\xb4\x5c\xd6\x62\x33\x64\x8b\x8b\x4a\xc7\x51\x1a\xb5\x6d\x77\x1a\x85\xd1\x90\xaf\x14\xcb\xb2\x16\x8a\xdc\x20\xda\x09\x1d\x9e\xb3\x0a\xe1\xf5\x02\x32\xfa\xc8\xec\x17\x09\x5b\xfa\x86\x49\x45\xb4\x9c\x2f\x35\xc4\x25\x53\xba\x2e\x0a\x85\x3a\x86\xb9\x67\x02\xc9\xc4\x0a\xe1\x44\x7e\x10\x39\x6e\xa7\x24\x52\xae\x03\x7d\x7f\xd2\xa7\x02\x63\xa2\x89\xd5\x48\x3a\x2e\xac\x0e\xe2\x69\xca\xf5\xf2\xfe\x50\xb1\xb3\xf9\x37\x14\x5c\x2a\x0d\xc6\xb4\x2d\x9c\xd4\xbd\x80\x5a\xdf\x7a\x13\x4e\x73\x67\xd8\x1b\xa0\x3c\xe1\xd7\x8e\xc3\xc6\x12\x7f\x89\x8d\x99\xcd\xe0\xf2\x9e\x37\x0d\xe6\x60\x49\x6d\x8b\xa5\x42\x7b\xde\xb6\x9e\xfb\xb3\xc4\x82\x6f\x31\x27\x29\x63\x80\x2b\x60\x44\xec\x52\x64\x0c\xd4\x05\xe8\x5d\x83\x7b\x11\x77\x6e\x13\xde\x05\xc8\x8b\xce\xfa\xdb\xba\xaa\x50\x68\x22\x84\x66\x82\x63\xe2\x77\xa2\xae\xcc\xe3\x8e\xec\xa3\xf2\xa1\xce\x6d\x56\x42\xc7\x16\xc0\x6b\xcd\x1c\xa3\x40\x98\xf7\x19\x33\x06\xfe\x07\x41\x06\x7b\x67\x5d\x02\x3c\x7f\x58\x94\x90\xf3\xd8\xc4\x83\xda\x4e\xbe\xd8\xea\x90\x02\x5b\xbf\xc3\x92\xba\x3f\x1e\x54\x2e\xe2\x94\xd0\x09\x1a\xab\xa6\x64\x1a\x81\x40\xcd\xc5\x0a\x65\x0c\x19\xd5\x92\xba\xea\x33\x93\x0a\xdb\x76\x8f\x4b\x63\x80\x69\x12\xd1\x0a\x74\x0d\xd4\x04\x28\x35\x30\x70\xc2\x74\x46\x25\x0b\x05\xa2\x62\x2d\x96\x63\x9a\x12\x41\xe0\x70\x82\x29\x24\x87\xc4\x29\xa0\x94\xb5\x4c\xa1\x8d\x26\xbc\x80\xed\x14\xea\x7b\x8a\xef\xcb\x21\x9b\x45\xe0\x35\x29\xba\x79\x43\x1c\x6d\x34\x99\x48\xd4\x6b\x29\x48\x44\xf0\x32\x9a\xd8\x2a\x53\xf3\x12\x97\xb2\x3d\xd3\xb1\x0c\xfc\x99\xa7\x53\x28\x2a\x9d\xbd\x27\xcb\x45\x12\x3f\x57\x04\x41\x51\x53\x7c\x1b\x56\xf2\x1c\x86\x3e\x6a\xb9\x83\xeb\xe7\xea\x26\x9e\x02\x69\x9f\xfa\x68\x54\xf6\xb1\xe6\x22\x19\xf8\x4a\xbf\x6a\x0a\xf1\x14\xe2\x34\xf5\xd0\x23\x04\xfc\x40\x8f\xbc\x1f\x69\x08\x6c\x3b\x84\xec\xf4\xaa\x98\x54\x77\xac\x04\x37\x4e\x3f\xb9\xaf\x2b\xdc\x6a\xe0\x55\x53\x22\xf5\x84\x02\x7d\x87\xa0\xe9\xcc\x73\x97\x28\xa1\x42\x7d\x57\xe7\xae\x90\xc9\x16\x5e\x1e\x1a\x4d\x43\x55\x49\x0a\xc9\xf5\xcd\xed\x4e\x63\x58\x41\x1f\x9d\x23\x24\xdb\xec\xd2\xa6\x29\x49\x53\x57\x23\x07\xb6\x3f\x44\xf5\x84\x4b\x6b\xf1\x2f\x9c\x3a\x50\x97\x58\x79\x67\x3f\x75\x8e\x91\x5f\xc2\x0f\x5e\x57\x36\xcb\x94\x46\x13\x5d\x35\xd6\x79\xa2\x3c\x84\xdb\xd4\xc2\x92\x98\x9e\x2d\x28\x86\x10\x79\x28\xa5\x85\xdd\xcb\x2d\x2c\x40\x57\x4d\x1f\xbf\x8b\xb5\x1b\x56\x5d\x59\xd4\xd7\xae\x24\x97\x4b\x26\x86\x81\xd3\x99\x40\x09\x5c\x68\x94\x05\x5b\x62\xf6\x70\xc8\xc4\x9b\xb8\xe9\xdf\xb3\xb7\x26\x88\x77\xc3\x24\x04\x5d\x17\x45\x13\xf5\x8d\xeb\xe5\x1d\x6c\x28\x56\x37\xfb\x12\x1a\xb0\xb6\x6a\x4b\xa6\x3a\xce\xd7\xd1\xc4\x25\x6b\x01\x1b\x4f\x70\xc9\x0c\x08\x3e\x89\x9b\xd4\x33\x08\x5e\x12\xd5\x66\xe1\x08\xd7\xfb\x6c\xf9\x26\xfd\xcf\xd3\x4e\x09\x76\x17\xd6\x20\xc3\xb9\xe4\x1b\x94\x8e\x36\x9a\xe7\x61\x9a\x2d\x27\x01\xdd\x49\xba\x6b\x70\x04\xee\x7b\x9c\x4f\x1f\x28\xbd\xdf\x27\x82\x76\xfc\x78\x79\x71\x3e\x74\x90\xb8\x32\x4f\x3f\x06\xfe\x03\xcd\x48\x8a\x1e\x6d\xc6\x50\x6b\xd8\x92\x94\xaa\xef\xe8\x2a\xab\x7f\xbc\xab\x08\x65\xaa\x83\x18\xd5\x8b\xd8\xae\xe7\x37\xb0\x58\xc0\x69\x7c\x6a\x6b\xe6\xab\xf8\x7a\xe1\xfc\xe8\xd5\x5a\x95\x53\x78\xa1\xd2\x37\xc3\x32\x1f\xd4\x99\x0a\x6d\xdc\xfc\x24\x9a\x82\x61\x13\x1b\x6b\xb9\x44\x91\xa8\x94\x0c\xcf\x07\x50\xa9\xa5\xca\xce\xf1\x5b\x12\xd3\x65\xb6\x73\xd8\x8f\x7b\x39\x45\xee\xfe\xba\x80\xd3\xf9\x29\xbc\x78\xe1\x3e\x7f\x59\xc0\xe9\xcf\xde\x7b\xa1\xf7\x45\xf7\x03\x84\xee\xc2\xec\x37\x5d\xf3\x44\xa5\xfb\x00\x1f\xf3\x7f\xb4\x35\x3a\xd5\xc7\x1d\xf2\x64\x83\xa8\x1f\x38\x94\x8a\x92\xad\xba\xa9\x84\x47\xd3\xf8\xac\x2e\x99\x58\x01\x31\xf9\x25\xb0\x6f\x1b\x20\xe8\x3c\x36\xa3\x50\xd3\x88\xea\xef\xfd\x3d\x6a\x1e\x8d\x6d\xc3\xca\xd4\x3b\xbf\x89\xc2\x98\x5c\x63\x9f\x3d\xee\xe3\x19\x6a\x1d\xf6\xf6\x53\x4e\x9e\x21\x5d\x64\xc1\x0c\x0d\xfa\xe6\xe5\xd6\xdb\xbc\xa2\x45\x74\x60\x74\xc5\xf5\xdd\xfa\x36\x5b\xd6\xd5\x4c\x35\xc5\xff\x7f\x9a\x35\xbf\x53\x22\x07\x39\x7a\xc4\x32\x29\x4d\xd2\x6e\x9d\xda\x5b\x8d\x07\x17\xfd\x61\xc9\xfc\x9f\x83\xd7\x46\xbf\xce\xf5\x2f\x8e\x91\x7d\x04\x16\xa4\xd9\x9b\xe3\xc5\xce\x3d\x19\xe8\x89\xd3\x23\xc1\xad\x4d\xc6\x50\x57\x8f\x6d\x34\x16\xc2\x82\x55\xbd\xb4\xdf\x1d\xc7\x58\x5d\x30\xb4\xd6\x97\x5c\x69\xda\xe6\x9b\x5a\x29\x7e\x5b\x76\xf7\x8c\xeb\x43\x45\x94\x43\x79\x9f\xb2\x11\xa5\x49\x0a\xd7\x37\xfb\x7c\xe9\xaa\x21\x0c\x55\xec\x1e\x93\xee\x7c\x6a\xe7\xc0\x98\xf3\xb4\x88\x2d\xeb\x66\x97\xd8\xde\x1a\xe5\xe8\x4b\x40\x4d\x63\xdf\x5b\xfd\xe3\x6e\x24\x25\x9f\x58\x63\x13\x02\x15\x6b\xc2\x7c\xda\x94\xb8\x19\x7b\x74\xc3\xfb\x42\x7d\xcf\xd5\xd3\x4d\xe9\x00\x20\x34\xad\xb4\x7c\x60\x3f\xfe\xc4\x9a\xeb\xed\xd1\x6a\xac\xb4\x9b\x05\xfe\x93\x36\xcc\xcb\x46\x72\xa1\x8b\x64\x80\xb3\xe4\x79\x9e\xc6\x53\xd8\xda\x5b\x61\x24\x5c\x07\x6c\x1b\x30\x2d\x67\x41\xc8\x59\x59\x7f\x43\x69\x17\x81\x10\xa3\xff\x04\x00\x00\xff\xff\x61\x4a\x40\x3b\xde\x0f\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 4062, mode: os.FileMode(0644), modTime: time.Unix(1602575834, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x27, 0x24, 0xba, 0xaa, 0xa8, 0x1d, 0xd8, 0xdd, 0xf2, 0xf9, 0x40, 0xf, 0xb9, 0xe4, 0x68, 0x56, 0x17, 0x67, 0xfa, 0x6a, 0x63, 0x2, 0xb0, 0xdf, 0xbe, 0xd9, 0x62, 0x21, 0x6c, 0xac, 0x83, 0x38}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
